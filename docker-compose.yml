version: '3.8'

services:

  # Zookeeper + Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    deploy:
      resources:
        limits:
          memory: 512M
    healthcheck:
      test: echo ruok | nc localhost 2181 || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    deploy:
      resources:
        limits:
          memory: 1G
    healthcheck:
      test: [ "CMD", "kafka-broker-api-versions", "--bootstrap-server=localhost:9092" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app-network

  # Producer
  binance-producer:
    build:
      context: .
      dockerfile: Dockerfile.producer

    container_name: producer
    env_file:
      - ./kafka/.env
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - BINANCE_SYMBOLS=BTCUSDT,ETHUSDT,BNBUSDT
      - BINANCE_INTERVAL=1s
    deploy:
      resources:
        limits:
          memory: 512M
    networks:
      - app-network

  clickhouse:
    image: yandex/clickhouse-server:latest
    container_name: clickhouse
    ports:
      - "8123:8123"  # HTTP interface
      - "9000:9000"  # Native interface
    environment:
      CLICKHOUSE_DB: crypto
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: secret
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    networks:
      - app-network

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9002:9000"  # Локальный порт 9002 для API MinIO
      - "9001:9001"  # Консоль MinIO остается на 9001
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - app-network

  airflow:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    container_name: airflow
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__CORE__DAGS_FOLDER: /usr/local/airflow/dags
      AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: 5
      

    volumes:
      - ./logs:/usr/local/airflow/logs
      - ./dags:/usr/local/airflow/dags
    depends_on:
      - postgres
    ports:
      - "8080:8080"
    networks:
      - app-network
    command: >
      bash -c "
      airflow db migrate &&
      airflow db init &&
      airflow users create \
          --username admin \
          --password admin \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com &&
      airflow standalone
      "

  postgres:
    build:
      context: .
      dockerfile: Dockerfile.postgres
    container_name: postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-metabase.sql:/docker-entrypoint-initdb.d/init-metabase.sql
    networks:
      - app-network

  metabase:
    image: metabase/metabase:latest
    container_name: metabase
    ports:
      - "3000:3000"
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: metabase
      MB_DB_PORT: 5432
      MB_DB_USER: metabase
      MB_DB_PASS: metabase
      MB_DB_HOST: postgres
    depends_on:
      - postgres
    networks:
      - app-network

  app:
    build:
      context: .
      dockerfile: Dockerfile.app
    container_name: app
    depends_on:
      - kafka
      - clickhouse
      - minio
    environment:
      CLICKHOUSE_HOST: clickhouse
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
    volumes:
      - ./app:/app
    networks:
      - app-network

volumes:
  clickhouse_data:
  minio_data:
  postgres_data:

networks:
  app-network:
    driver: bridge