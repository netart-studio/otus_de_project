import streamlit as st
import pandas as pd
from clickhouse_driver import Client
import plotly.express as px
import time
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv
import numpy as np
import pytz

# –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–ï–†–í–´–ú –≤—ã–∑–æ–≤–æ–º Streamlit –≤ —Å–∫—Ä–∏–ø—Ç–µ
st.set_page_config(
    page_title="Crypto Dashboard",
    page_icon="üìà",
    layout="wide"
)

# –°–∫—Ä—ã—Ç–∏–µ toolbar —á–µ—Ä–µ–∑ CSS
hide_toolbar = """
<style>
    .stApp header {
        visibility: hidden;
    }
</style>
"""

st.markdown(hide_toolbar, unsafe_allow_html=True)

# –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ClickHouse –∏–∑ .env
CLICKHOUSE_HOST = os.getenv('CLICKHOUSE_HOST', 'localhost')
CLICKHOUSE_PORT = int(os.getenv('CLICKHOUSE_PORT', 9000))
CLICKHOUSE_USER = os.getenv('CLICKHOUSE_USER', 'default')
CLICKHOUSE_PASSWORD = os.getenv('CLICKHOUSE_PASSWORD', 'secret')
CLICKHOUSE_DB = os.getenv('CLICKHOUSE_DB', 'crypto')
CLICKHOUSE_TABLE = os.getenv('CLICKHOUSE_TABLE', 'crypto_trades')
REFRESH_INTERVAL = 1  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

def get_clickhouse_client():
    return Client(
        host=CLICKHOUSE_HOST,
        port=CLICKHOUSE_PORT,
        user=CLICKHOUSE_USER,
        password=CLICKHOUSE_PASSWORD,
        database=CLICKHOUSE_DB
    )

def get_time_filter_interval(period):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    intervals = {
        '1 HOUR': 1,
        '6 HOUR': 6,
        '12 HOUR': 12,
        '24 HOUR': 24
    }
    return intervals.get(period, 6)

def load_sql_query():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç SQL –∑–∞–ø—Ä–æ—Å –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('query.sql', 'r') as file:
            return file.read()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ SQL —Ñ–∞–π–ª–∞: {e}")
        return None

@st.cache_data(ttl=REFRESH_INTERVAL)
def load_data(period):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ ClickHouse —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"""
    time_interval = get_time_filter_interval(period)
    client = get_clickhouse_client()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º SQL –∑–∞–ø—Ä–æ—Å –∏–∑ —Ñ–∞–π–ª–∞
    query_template = load_sql_query()
    if query_template is None:
        return pd.DataFrame()
    
    # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–ø—Ä–æ—Å
    query = query_template.format(
        table=CLICKHOUSE_TABLE,
        interval=time_interval
    )
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = client.execute(query)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        if not result:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return pd.DataFrame()
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        columns = ['minute', 'btc_price', 'btc_ma', 'eth_price', 'eth_ma', 
                 'xrp_price', 'xrp_ma', 'btc_eth_spread', 'btc_xrp_spread',
                 'btc_count', 'eth_count', 'xrp_count']
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(result, columns=columns)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        missing_columns = [col for col in columns if col not in df.columns]
        if missing_columns:
            st.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
            return pd.DataFrame()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–æ–ª–±–µ—Ü minute –≤ datetime
        df['minute'] = pd.to_datetime(df['minute'])
        
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return pd.DataFrame()

def create_price_chart(data, price_col, ma_col, title):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã —Å –ª–∏–Ω–∏–µ–π —Ç—Ä–µ–Ω–¥–∞"""
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    data = data.copy()
    if data['minute'].dt.tz is None:
        data['minute'] = data['minute'].dt.tz_localize('UTC').dt.tz_convert('Europe/Moscow')
    else:
        data['minute'] = data['minute'].dt.tz_convert('Europe/Moscow')
    
    fig = px.line(data, x='minute', y=[price_col, ma_col],
                 title=title,
                 labels={'value': 'Price', 'minute': 'Time'})
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –ª–∏–Ω–∏–π
    fig.update_traces(line=dict(width=1))
    fig.data[0].line.color = 'blue'  # –¶–µ–Ω–∞
    fig.data[1].line.color = 'red'   # –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ
    fig.data[1].line.dash = 'dash'   # –ü—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è –¥–ª—è MA
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
    fig.update_xaxes(
        title_text='Time (Moscow)',
        tickformat='%H:%M',
        tickangle=45,
        nticks=10,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–æ–∫ –Ω–∞ –æ—Å–∏
        range=[data['minute'].min(), data['minute'].max()]  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Å–∏ X
    )
    fig.update_yaxes(title_text='Price')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–µ–≥–µ–Ω–¥—ã
    fig.update_layout(
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        ),
        margin=dict(l=20, r=20, t=40, b=40)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É –¥–ª—è –º–µ—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
    )
    
    return fig

def create_spread_chart(data, spread_col, title):
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    data = data.copy()
    if data['minute'].dt.tz is None:
        data['minute'] = data['minute'].dt.tz_localize('UTC').dt.tz_convert('Europe/Moscow')
    else:
        data['minute'] = data['minute'].dt.tz_convert('Europe/Moscow')
    
    fig = px.line(data, x='minute', y=spread_col,
                 title=title,
                 labels={'value': 'Spread', 'minute': 'Time'})
    fig.update_traces(line=dict(width=2))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
    fig.update_xaxes(
        title_text='Time (Moscow)',
        tickformat='%H:%M',
        tickangle=45,
        nticks=10,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–æ–∫ –Ω–∞ –æ—Å–∏
        range=[data['minute'].min(), data['minute'].max()]  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Å–∏ X
    )
    
    fig.update_layout(
        margin=dict(l=20, r=20, t=40, b=40),  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É –¥–ª—è –º–µ—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
        height=300
    )
    return fig

def get_moscow_time():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
    return datetime.now(MOSCOW_TZ).strftime('%Y-%m-%d %H:%M:%S')

def create_histogram(data):
    """–°–æ–∑–¥–∞–µ—Ç –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å"""
    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
    hist_data = pd.DataFrame({
        'Cryptocurrency': ['BTC', 'ETH', 'XRP'],
        'Count': [
            data['btc_count'].iloc[0],
            data['eth_count'].iloc[0],
            data['xrp_count'].iloc[0]
        ]
    })
    
    # –°–æ–∑–¥–∞–µ–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É
    fig = px.bar(hist_data, 
                 x='Cryptocurrency', 
                 y='Count',
                 color='Cryptocurrency',
                 title='Number of Records per Cryptocurrency (Last Hour)')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
    fig.update_xaxes(title_text='Cryptocurrency')
    fig.update_yaxes(title_text='Number of Records')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–µ–≥–µ–Ω–¥—ã
    fig.update_layout(
        showlegend=False,  # –°–∫—Ä—ã–≤–∞–µ–º –ª–µ–≥–µ–Ω–¥—É, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –∏–∑–±—ã—Ç–æ—á–Ω–∞
        margin=dict(l=20, r=20, t=40, b=20)
    )
    
    return fig

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ClickHouse
    clickhouse_settings = {
        'host': os.getenv('CLICKHOUSE_HOST', 'localhost'),
        'port': int(os.getenv('CLICKHOUSE_PORT', 9000)),
        'user': os.getenv('CLICKHOUSE_USER', 'default'),
        'password': os.getenv('CLICKHOUSE_PASSWORD', ''),
        'database': os.getenv('CLICKHOUSE_DATABASE', 'default'),
        'table': os.getenv('CLICKHOUSE_TABLE', 'crypto_trades')
    }
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
    if 'last_update' not in st.session_state:
        st.session_state.last_update = None
    if 'data' not in st.session_state:
        st.session_state.data = None
    if 'auto_update' not in st.session_state:
        st.session_state.auto_update = True
    if 'update_interval' not in st.session_state:
        st.session_state.update_interval = 60
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        auto_update = st.checkbox("–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", value=True)
        if auto_update:
            update_interval = st.slider("–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–µ–∫)", 5, 300, 5)
            st.session_state.update_interval = update_interval
        
        st.session_state.auto_update = auto_update
        
        # –ö–Ω–æ–ø–∫–∞ —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if st.button("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
            st.session_state.last_update = None
            st.cache_data.clear()
            st.experimental_rerun()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = load_data('24 HOUR')  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 24 —á–∞—Å–∞
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –Ω–µ –ø—É—Å—Ç—ã–µ
    if df is None or df.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    st.session_state.data = df
    st.session_state.last_update = datetime.now()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if st.session_state.last_update:
        st.write(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {st.session_state.last_update.strftime('%H:%M:%S')}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
    tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs(["BTC/USDT", "ETH/USDT", "XRP/USDT", "Spreads", "Statistics", "Debug"])
    
    # –í–∫–ª–∞–¥–∫–∞ BTC
    with tab1:
        container = st.empty()
        with container.container():
            col1, col2 = st.columns([1, 2])
            with col1:
                st.metric("BTC Price", f"${df['btc_price'].iloc[-1]:,.2f}")
            with col2:
                st.metric("BTC MA", f"${df['btc_ma'].iloc[-1]:,.2f}")
            st.plotly_chart(create_price_chart(df, 'btc_price', 'btc_ma', 'BTC/USDT Price'), use_container_width=True)
    
    # –í–∫–ª–∞–¥–∫–∞ ETH
    with tab2:
        container = st.empty()
        with container.container():
            col1, col2 = st.columns([1, 2])
            with col1:
                st.metric("ETH Price", f"${df['eth_price'].iloc[-1]:,.2f}")
            with col2:
                st.metric("ETH MA", f"${df['eth_ma'].iloc[-1]:,.2f}")
            st.plotly_chart(create_price_chart(df, 'eth_price', 'eth_ma', 'ETH/USDT Price'), use_container_width=True)
    
    # –í–∫–ª–∞–¥–∫–∞ XRP
    with tab3:
        container = st.empty()
        with container.container():
            col1, col2 = st.columns([1, 2])
            with col1:
                st.metric("XRP Price", f"${df['xrp_price'].iloc[-1]:,.2f}")
            with col2:
                st.metric("XRP MA", f"${df['xrp_ma'].iloc[-1]:,.2f}")
            st.plotly_chart(create_price_chart(df, 'xrp_price', 'xrp_ma', 'XRP/USDT Price'), use_container_width=True)
    
    # –í–∫–ª–∞–¥–∫–∞ Spreads
    with tab4:
        container = st.empty()
        with container.container():
            # BTC-ETH Spread
            st.metric("BTC-ETH Spread", f"${df['btc_eth_spread'].iloc[-1]:,.2f}")
            st.plotly_chart(create_spread_chart(df, 'btc_eth_spread', 'BTC-ETH Spread'), use_container_width=True)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            st.markdown("---")
            
            # BTC-XRP Spread
            st.metric("BTC-XRP Spread", f"${df['btc_xrp_spread'].iloc[-1]:,.2f}")
            st.plotly_chart(create_spread_chart(df, 'btc_xrp_spread', 'BTC-XRP Spread'), use_container_width=True)
    
    # –í–∫–ª–∞–¥–∫–∞ Statistics
    with tab5:
        container = st.empty()
        with container.container():
            st.header("Statistics")
            st.plotly_chart(create_histogram(df), use_container_width=True)
    
    # –í–∫–ª–∞–¥–∫–∞ Debug
    with tab6:
        st.header("Debug Information")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        st.subheader("Time Range")
        st.write("–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥: 24 HOUR")
        st.write("–ß–∏—Å–ª–æ–≤–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:", get_time_filter_interval('24 HOUR'))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö
        st.subheader("Data Information")
        st.write("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫:", len(df))
        st.write("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:", df.columns.tolist())
        
        if not df.empty:
            st.write("–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞:", df.iloc[0].to_dict())
            st.write("–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞:", df.iloc[-1].to_dict())
            st.write("–í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:", df['minute'].min(), "–¥–æ", df['minute'].max())
            st.write("–†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏:", df['minute'].max() - df['minute'].min())
        
        # SQL –∑–∞–ø—Ä–æ—Å
        st.subheader("SQL Query")
        query_template = load_sql_query()
        if query_template:
            query = query_template.format(
                table=CLICKHOUSE_TABLE,
                interval=get_time_filter_interval('24 HOUR')
            )
            st.code(query, language='sql')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
        st.subheader("Last 100 Records")
        if not df.empty:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
            display_df = df.copy()
            display_df['minute'] = display_df['minute'].dt.strftime('%Y-%m-%d %H:%M:%S')
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π
            st.dataframe(display_df.tail(100), use_container_width=True)

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if st.session_state.auto_update:
        time.sleep(st.session_state.update_interval)
        st.experimental_rerun()

if __name__ == "__main__":
    main()